/**
 * Cookie Consent Utils - Herramientas para depuraci√≥n y gesti√≥n de cookies entre p√°ginas
 * Versi√≥n: 2.0 - Soluci√≥n centralizada para todas las p√°ginas
 */

// Esta es la soluci√≥n centralizada que debe ejecutarse primero, antes que el resto de scripts
document.addEventListener('DOMContentLoaded', function() {
  // Verificar el estado de las cookies en cada carga de p√°gina
  checkCookieConsistency();
  
  // Buscar y eliminar cualquier banner que no deber√≠a estar ah√≠
  setTimeout(removeBannerIfCookiesAccepted, 100);
  
  // Establecer un observador para asegurarse de que no se a√±ada un banner si ya est√°n aceptadas
  setupBannerObserver();
});

/**
 * Verifica la consistencia de las cookies entre p√°ginas
 * Corrige autom√°ticamente problemas comunes
 */
function checkCookieConsistency() {
  try {
    const cookiesAccepted = localStorage.getItem('cookiesAccepted');
    const cookiesPreferences = localStorage.getItem('cookiesPreferences');
    
    // Verificar si hay inconsistencias en los datos guardados
    if (cookiesAccepted === 'true' && !cookiesPreferences) {
      // Hay una inconsistencia: aceptadas pero sin preferencias
      console.warn('‚ö†Ô∏è Inconsistencia detectada: cookiesAccepted=true pero sin preferencias');
      
      // Recrear las preferencias con valores predeterminados
      localStorage.setItem('cookiesPreferences', JSON.stringify({
        analytics: true,
        marketing: true,
        necessary: true,
        timestamp: new Date().getTime(),
        recoveryNeeded: true // Marca que hubo que recuperar datos
      }));
      
      console.log('‚úÖ Preferencias restauradas autom√°ticamente');
    }
    
    // Verificar si hay valores inv√°lidos
    if (cookiesAccepted !== null && cookiesAccepted !== 'true' && cookiesAccepted !== 'false') {
      console.warn('‚ö†Ô∏è Valor inv√°lido detectado para cookiesAccepted:', cookiesAccepted);
      
      // Corregir el valor
      localStorage.setItem('cookiesAccepted', 'false');
      console.log('‚úÖ Valor corregido a "false"');
    }
    
    // Registrar el dominio y p√°gina actual (√∫til para depuraci√≥n)
    const domain = window.location.hostname;
    const path = window.location.pathname;
    const page = path.substring(path.lastIndexOf('/') + 1) || 'index.html';
    
    console.log(`üìÑ P√°gina cargada: ${page} - Estado cookies: ${cookiesAccepted === 'true' ? 'Aceptadas' : 'No aceptadas'}`);
  } catch (error) {
    console.error('‚ùå Error al verificar la consistencia de las cookies:', error);
  }
}

/**
 * Fuerza la aceptaci√≥n de cookies en caso de problemas persistentes
 */
function forceAcceptCookies() {
  try {
    localStorage.setItem('cookiesAccepted', 'true');
    localStorage.setItem('cookiesPreferences', JSON.stringify({
      analytics: true,
      marketing: true,
      necessary: true,
      timestamp: new Date().getTime(),
      forcedAccept: true
    }));
    
    console.log('‚úÖ Cookies forzadas a estado "aceptadas"');
    console.log('üîÑ Recarga la p√°gina para aplicar los cambios');
  } catch (error) {
    console.error('‚ùå Error al forzar la aceptaci√≥n de cookies:', error);
    
    // Intentar alternativa con sessionStorage como respaldo
    try {
      sessionStorage.setItem('cookiesAccepted', 'true');
      console.log('‚ö†Ô∏è Usando sessionStorage como alternativa (solo durar√° esta sesi√≥n)');
    } catch (e) {
      console.error('‚ùå No se pudo usar localStorage ni sessionStorage');
    }
  }
}

/**
 * Verificaci√≥n detallada para depuraci√≥n
 */
function diagnosticCookieConsent() {
  try {
    // Verificar localStorage
    const cookiesAccepted = localStorage.getItem('cookiesAccepted');
    const cookiesPreferences = localStorage.getItem('cookiesPreferences');
    
    console.group('üîç Diagn√≥stico de Cookies');
    console.log('üìä Estado actual:');
    console.log('- cookiesAccepted:', cookiesAccepted);
    console.log('- cookiesPreferences:', cookiesPreferences);
    
    // Verificar navegador y compatibilidad
    const isPrivateMode = !window.localStorage;
    console.log('üåê Navegador:', navigator.userAgent);
    console.log('üîí Modo privado/inc√≥gnito:', isPrivateMode ? 'Probable' : 'No detectado');
    
    // Prueba de escritura/lectura
    const testKey = '_test_cookie_' + Math.random();
    const testValue = 'test_' + new Date().getTime();
    
    try {
      localStorage.setItem(testKey, testValue);
      const readValue = localStorage.getItem(testKey);
      localStorage.removeItem(testKey);
      
      console.log('‚úÖ Prueba de localStorage: ' + (readValue === testValue ? 'Exitosa' : 'Fallida'));
    } catch (e) {
      console.log('‚ùå Prueba de localStorage: Fallida - ' + e.message);
    }
    
    console.groupEnd();
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico de cookies:', error);
  }
}

/**
 * Elimina el banner de cookies si ya est√°n aceptadas
 * Esta funci√≥n se ejecuta despu√©s de un peque√±o retraso para asegurar que el DOM est√° listo
 */
function removeBannerIfCookiesAccepted() {
  try {
    const cookiesAccepted = localStorage.getItem('cookiesAccepted');
    if (cookiesAccepted === 'true') {
      // Si las cookies ya est√°n aceptadas, verificar si hay un banner visible
      const banner = document.querySelector('.cookie-consent');
      if (banner) {
        console.warn('‚ö†Ô∏è Banner de cookies detectado aunque las cookies est√°n aceptadas');
        
        // Eliminar el banner con animaci√≥n suave
        banner.classList.remove('active');
        setTimeout(() => {
          banner.remove();
          console.log('‚úÖ Banner eliminado correctamente');
        }, 300);
      }
    }
  } catch (error) {
    console.error('‚ùå Error al intentar eliminar el banner:', error);
  }
}

/**
 * Establece un observador para detectar si se agrega un banner de cookies
 * y lo elimina si ya est√°n aceptadas las cookies
 */
function setupBannerObserver() {
  try {
    // Crear un observador de mutaciones para detectar cuando se a√±ade el banner al DOM
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === 1 && node.classList && node.classList.contains('cookie-consent')) {
            // Si se ha a√±adido un banner de cookies al DOM
            const cookiesAccepted = localStorage.getItem('cookiesAccepted');
            if (cookiesAccepted === 'true') {
              console.warn('‚ö†Ô∏è Se intent√≥ mostrar el banner aunque las cookies est√°n aceptadas');
              
              // Eliminar el banner inmediatamente
              node.classList.remove('active');
              setTimeout(() => {
                node.remove();
                console.log('‚úÖ Banner eliminado por el observador');
              }, 100);
            }
          }
        });
      });
    });
    
    // Iniciar la observaci√≥n del DOM
    observer.observe(document.body, {
      childList: true, // Observar adiciones/eliminaciones directas de hijos
      subtree: false   // No observar cambios en descendientes
    });
    
    console.log('üîç Observador de banner configurado');
  } catch (error) {
    console.error('‚ùå Error al configurar el observador de banner:', error);
  }
}

// Exponer funciones para uso desde la consola
window.cookieUtils = {
  check: checkCookieConsistency,
  force: forceAcceptCookies,
  diagnostic: diagnosticCookieConsent,
  removeBanner: removeBannerIfCookiesAccepted
};

// Garantizar que esta soluci√≥n se aplica incluso si hay errores en otros scripts
window.addEventListener('error', function(event) {
  if (event.filename && event.filename.includes('cookie-consent.js')) {
    console.error('‚ùå Error en cookie-consent.js. Aplicando correcci√≥n de emergencia...');
    setTimeout(function() {
      if (localStorage.getItem('cookiesAccepted') === 'true') {
        removeBannerIfCookiesAccepted();
      }
    }, 500);
  }
});
